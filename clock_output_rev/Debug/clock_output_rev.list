
clock_output_rev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08000f60  08000f60  00010f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010d0  080010d0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080010d0  080010d0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010d0  080010d0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010d0  080010d0  000110d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010d4  080010d4  000110d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080010d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  0800113c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800113c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009d5  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002fc  00000000  00000000  00020a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00020d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00020e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c0a  00000000  00000000  00020f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001355  00000000  00000000  00023b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009418  00000000  00000000  00024eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e2cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a1c  00000000  00000000  0002e320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000f48 	.word	0x08000f48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08000f48 	.word	0x08000f48

080001d8 <main>:
#define GPIOA_MODER			(GPIOA_base_Addr) //GPIOA mode set
#define GPIOA_AFRH			(GPIOA_base_Addr+0x24) //GPIOA alt fun set


int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
	volatile uint32_t *const pRCC_CR=(uint32_t*)RCC_CR; //RCC clock control reg
 80001de:	4b3e      	ldr	r3, [pc, #248]	; (80002d8 <main+0x100>)
 80001e0:	617b      	str	r3, [r7, #20]
	volatile uint32_t *const pRCC_CFGR=(uint32_t*)RCC_CFGR; //RCC clock configure reg
 80001e2:	4b3e      	ldr	r3, [pc, #248]	; (80002dc <main+0x104>)
 80001e4:	613b      	str	r3, [r7, #16]
	volatile uint32_t *const pGPIOA_MODER=(uint32_t*)GPIOA_MODER; //GPIOA mode set reg
 80001e6:	4b3e      	ldr	r3, [pc, #248]	; (80002e0 <main+0x108>)
 80001e8:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *const pGPIOA_AFRH=(uint32_t*)GPIOA_AFRH; //altfun high reg
 80001ea:	4b3e      	ldr	r3, [pc, #248]	; (80002e4 <main+0x10c>)
 80001ec:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *const pRCC_AHB1ENR=(uint32_t*)RCC_AHB1ENR; //AHB1 clock enable reg
 80001ee:	4b3e      	ldr	r3, [pc, #248]	; (80002e8 <main+0x110>)
 80001f0:	607b      	str	r3, [r7, #4]

	//RCC MCO1 HSE select
	*pRCC_CFGR&=~(3<<21);
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	601a      	str	r2, [r3, #0]
	*pRCC_CFGR|=(2<<21);
 80001fe:	693b      	ldr	r3, [r7, #16]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	601a      	str	r2, [r3, #0]

	printf("MCO1 HSE clock source selected\n");
 800020a:	4838      	ldr	r0, [pc, #224]	; (80002ec <main+0x114>)
 800020c:	f000 fa12 	bl	8000634 <puts>

	//RCC MCO1 pre-scaler set to 4 ->110
	*pRCC_CFGR&=~(7<<24);
 8000210:	693b      	ldr	r3, [r7, #16]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	601a      	str	r2, [r3, #0]
	*pRCC_CFGR|=(4<<24);
 800021c:	693b      	ldr	r3, [r7, #16]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000224:	693b      	ldr	r3, [r7, #16]
 8000226:	601a      	str	r2, [r3, #0]

	printf("MCO1 pre-scaler set to 4\n");
 8000228:	4831      	ldr	r0, [pc, #196]	; (80002f0 <main+0x118>)
 800022a:	f000 fa03 	bl	8000634 <puts>

	//GPIOA AHB1ENR clock enable
	*pRCC_AHB1ENR|=(1<<0);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0201 	orr.w	r2, r3, #1
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]

	printf("AHB1 GPIOA clock enable\n");
 800023a:	482e      	ldr	r0, [pc, #184]	; (80002f4 <main+0x11c>)
 800023c:	f000 f9fa 	bl	8000634 <puts>

	//HSE clock enable
	*pRCC_CR|=(1<<16);
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	601a      	str	r2, [r3, #0]

	printf("HSE clock enabled\n");
 800024c:	482a      	ldr	r0, [pc, #168]	; (80002f8 <main+0x120>)
 800024e:	f000 f9f1 	bl	8000634 <puts>

	//wait till HSE is stable
	while(!((*pRCC_CR>>17)&1));
 8000252:	bf00      	nop
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	0c5b      	lsrs	r3, r3, #17
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f8      	beq.n	8000254 <main+0x7c>

	printf("HSE clock is stable\n");
 8000262:	4826      	ldr	r0, [pc, #152]	; (80002fc <main+0x124>)
 8000264:	f000 f9e6 	bl	8000634 <puts>

	//switch system clock to HSE
	*pRCC_CFGR|=(1<<0);
 8000268:	693b      	ldr	r3, [r7, #16]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f043 0201 	orr.w	r2, r3, #1
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	601a      	str	r2, [r3, #0]

	uint8_t flag=((*pRCC_CFGR>>2)&3);
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	089b      	lsrs	r3, r3, #2
 800027a:	b2db      	uxtb	r3, r3
 800027c:	f003 0303 	and.w	r3, r3, #3
 8000280:	70fb      	strb	r3, [r7, #3]
	if(flag==0)
 8000282:	78fb      	ldrb	r3, [r7, #3]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d103      	bne.n	8000290 <main+0xb8>
	{
		printf("System clock not switched to HSE\n");
 8000288:	481d      	ldr	r0, [pc, #116]	; (8000300 <main+0x128>)
 800028a:	f000 f9d3 	bl	8000634 <puts>
 800028e:	e009      	b.n	80002a4 <main+0xcc>
	}
	else if(flag==1)
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d103      	bne.n	800029e <main+0xc6>
	{
		printf("Switched system clock to HSE crystal oscillator\n");
 8000296:	481b      	ldr	r0, [pc, #108]	; (8000304 <main+0x12c>)
 8000298:	f000 f9cc 	bl	8000634 <puts>
 800029c:	e002      	b.n	80002a4 <main+0xcc>
	}
	else
	{
		printf("Not Applicable\n");
 800029e:	481a      	ldr	r0, [pc, #104]	; (8000308 <main+0x130>)
 80002a0:	f000 f9c8 	bl	8000634 <puts>
	}

	//GPIOA mode set for PA8
	*pGPIOA_MODER&=~(3<<16);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	601a      	str	r2, [r3, #0]
	*pGPIOA_MODER|=(2<<16);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	601a      	str	r2, [r3, #0]

	printf("PA8 mode set to altfun mode\n");
 80002bc:	4813      	ldr	r0, [pc, #76]	; (800030c <main+0x134>)
 80002be:	f000 f9b9 	bl	8000634 <puts>

	//PA8 altfun0 set
	*pGPIOA_AFRH&=~(0xf<<0);
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f023 020f 	bic.w	r2, r3, #15
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	601a      	str	r2, [r3, #0]

	printf("PA8 altfun0 set\n");
 80002ce:	4810      	ldr	r0, [pc, #64]	; (8000310 <main+0x138>)
 80002d0:	f000 f9b0 	bl	8000634 <puts>

	while(1);
 80002d4:	e7fe      	b.n	80002d4 <main+0xfc>
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40023808 	.word	0x40023808
 80002e0:	40020000 	.word	0x40020000
 80002e4:	40020024 	.word	0x40020024
 80002e8:	40023830 	.word	0x40023830
 80002ec:	08000f60 	.word	0x08000f60
 80002f0:	08000f80 	.word	0x08000f80
 80002f4:	08000f9c 	.word	0x08000f9c
 80002f8:	08000fb4 	.word	0x08000fb4
 80002fc:	08000fc8 	.word	0x08000fc8
 8000300:	08000fdc 	.word	0x08000fdc
 8000304:	08001000 	.word	0x08001000
 8000308:	08001030 	.word	0x08001030
 800030c:	08001040 	.word	0x08001040
 8000310:	0800105c 	.word	0x0800105c

08000314 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <ITM_SendChar+0x44>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <ITM_SendChar+0x44>)
 8000324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000328:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <ITM_SendChar+0x48>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a0b      	ldr	r2, [pc, #44]	; (800035c <ITM_SendChar+0x48>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000336:	bf00      	nop
 8000338:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000346:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	6013      	str	r3, [r2, #0]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	e000edfc 	.word	0xe000edfc
 800035c:	e0000e00 	.word	0xe0000e00

08000360 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
 8000370:	e00a      	b.n	8000388 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000372:	f3af 8000 	nop.w
 8000376:	4601      	mov	r1, r0
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	60ba      	str	r2, [r7, #8]
 800037e:	b2ca      	uxtb	r2, r1
 8000380:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	3301      	adds	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	429a      	cmp	r2, r3
 800038e:	dbf0      	blt.n	8000372 <_read+0x12>
	}

return len;
 8000390:	687b      	ldr	r3, [r7, #4]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b086      	sub	sp, #24
 800039e:	af00      	add	r7, sp, #0
 80003a0:	60f8      	str	r0, [r7, #12]
 80003a2:	60b9      	str	r1, [r7, #8]
 80003a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
 80003aa:	e009      	b.n	80003c0 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	1c5a      	adds	r2, r3, #1
 80003b0:	60ba      	str	r2, [r7, #8]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ffad 	bl	8000314 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	3301      	adds	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	697a      	ldr	r2, [r7, #20]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	dbf1      	blt.n	80003ac <_write+0x12>
	}
	return len;
 80003c8:	687b      	ldr	r3, [r7, #4]
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <_close>:

int _close(int file)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
	return -1;
 80003da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003de:	4618      	mov	r0, r3
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003f8:	605a      	str	r2, [r3, #4]
	return 0;
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <_isatty>:

int _isatty(int file)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
	return 1;
 800040e:	2301      	movs	r3, #1
}
 8000410:	4618      	mov	r0, r3
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr

0800041a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800041a:	b480      	push	{r7}
 800041c:	b085      	sub	sp, #20
 800041e:	af00      	add	r7, sp, #0
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	60b9      	str	r1, [r7, #8]
 8000424:	607a      	str	r2, [r7, #4]
	return 0;
 8000426:	2300      	movs	r3, #0
}
 8000428:	4618      	mov	r0, r3
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
	...

08000434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800043c:	4a14      	ldr	r2, [pc, #80]	; (8000490 <_sbrk+0x5c>)
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <_sbrk+0x60>)
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <_sbrk+0x64>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d102      	bne.n	8000456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <_sbrk+0x64>)
 8000452:	4a12      	ldr	r2, [pc, #72]	; (800049c <_sbrk+0x68>)
 8000454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <_sbrk+0x64>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	693a      	ldr	r2, [r7, #16]
 8000460:	429a      	cmp	r2, r3
 8000462:	d207      	bcs.n	8000474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000464:	f000 f846 	bl	80004f4 <__errno>
 8000468:	4603      	mov	r3, r0
 800046a:	220c      	movs	r2, #12
 800046c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	e009      	b.n	8000488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <_sbrk+0x64>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047a:	4b07      	ldr	r3, [pc, #28]	; (8000498 <_sbrk+0x64>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	4a05      	ldr	r2, [pc, #20]	; (8000498 <_sbrk+0x64>)
 8000484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000486:	68fb      	ldr	r3, [r7, #12]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20020000 	.word	0x20020000
 8000494:	00000400 	.word	0x00000400
 8000498:	20000080 	.word	0x20000080
 800049c:	20000098 	.word	0x20000098

080004a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <LoopForever+0x6>)
  ldr r1, =_edata
 80004aa:	490d      	ldr	r1, [pc, #52]	; (80004e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <LoopForever+0xe>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b0:	e002      	b.n	80004b8 <LoopCopyDataInit>

080004b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b6:	3304      	adds	r3, #4

080004b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004bc:	d3f9      	bcc.n	80004b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004be:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c0:	4c0a      	ldr	r4, [pc, #40]	; (80004ec <LoopForever+0x16>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c4:	e001      	b.n	80004ca <LoopFillZerobss>

080004c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c8:	3204      	adds	r2, #4

080004ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004cc:	d3fb      	bcc.n	80004c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ce:	f000 f817 	bl	8000500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d2:	f7ff fe81 	bl	80001d8 <main>

080004d6 <LoopForever>:

LoopForever:
    b LoopForever
 80004d6:	e7fe      	b.n	80004d6 <LoopForever>
  ldr   r0, =_estack
 80004d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004e4:	080010d8 	.word	0x080010d8
  ldr r2, =_sbss
 80004e8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004ec:	20000094 	.word	0x20000094

080004f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <ADC_IRQHandler>
	...

080004f4 <__errno>:
 80004f4:	4b01      	ldr	r3, [pc, #4]	; (80004fc <__errno+0x8>)
 80004f6:	6818      	ldr	r0, [r3, #0]
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000000 	.word	0x20000000

08000500 <__libc_init_array>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	4d0d      	ldr	r5, [pc, #52]	; (8000538 <__libc_init_array+0x38>)
 8000504:	4c0d      	ldr	r4, [pc, #52]	; (800053c <__libc_init_array+0x3c>)
 8000506:	1b64      	subs	r4, r4, r5
 8000508:	10a4      	asrs	r4, r4, #2
 800050a:	2600      	movs	r6, #0
 800050c:	42a6      	cmp	r6, r4
 800050e:	d109      	bne.n	8000524 <__libc_init_array+0x24>
 8000510:	4d0b      	ldr	r5, [pc, #44]	; (8000540 <__libc_init_array+0x40>)
 8000512:	4c0c      	ldr	r4, [pc, #48]	; (8000544 <__libc_init_array+0x44>)
 8000514:	f000 fd18 	bl	8000f48 <_init>
 8000518:	1b64      	subs	r4, r4, r5
 800051a:	10a4      	asrs	r4, r4, #2
 800051c:	2600      	movs	r6, #0
 800051e:	42a6      	cmp	r6, r4
 8000520:	d105      	bne.n	800052e <__libc_init_array+0x2e>
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	f855 3b04 	ldr.w	r3, [r5], #4
 8000528:	4798      	blx	r3
 800052a:	3601      	adds	r6, #1
 800052c:	e7ee      	b.n	800050c <__libc_init_array+0xc>
 800052e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000532:	4798      	blx	r3
 8000534:	3601      	adds	r6, #1
 8000536:	e7f2      	b.n	800051e <__libc_init_array+0x1e>
 8000538:	080010d0 	.word	0x080010d0
 800053c:	080010d0 	.word	0x080010d0
 8000540:	080010d0 	.word	0x080010d0
 8000544:	080010d4 	.word	0x080010d4

08000548 <memset>:
 8000548:	4402      	add	r2, r0
 800054a:	4603      	mov	r3, r0
 800054c:	4293      	cmp	r3, r2
 800054e:	d100      	bne.n	8000552 <memset+0xa>
 8000550:	4770      	bx	lr
 8000552:	f803 1b01 	strb.w	r1, [r3], #1
 8000556:	e7f9      	b.n	800054c <memset+0x4>

08000558 <_puts_r>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	460e      	mov	r6, r1
 800055c:	4605      	mov	r5, r0
 800055e:	b118      	cbz	r0, 8000568 <_puts_r+0x10>
 8000560:	6983      	ldr	r3, [r0, #24]
 8000562:	b90b      	cbnz	r3, 8000568 <_puts_r+0x10>
 8000564:	f000 fa44 	bl	80009f0 <__sinit>
 8000568:	69ab      	ldr	r3, [r5, #24]
 800056a:	68ac      	ldr	r4, [r5, #8]
 800056c:	b913      	cbnz	r3, 8000574 <_puts_r+0x1c>
 800056e:	4628      	mov	r0, r5
 8000570:	f000 fa3e 	bl	80009f0 <__sinit>
 8000574:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <_puts_r+0xd0>)
 8000576:	429c      	cmp	r4, r3
 8000578:	d120      	bne.n	80005bc <_puts_r+0x64>
 800057a:	686c      	ldr	r4, [r5, #4]
 800057c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800057e:	07db      	lsls	r3, r3, #31
 8000580:	d405      	bmi.n	800058e <_puts_r+0x36>
 8000582:	89a3      	ldrh	r3, [r4, #12]
 8000584:	0598      	lsls	r0, r3, #22
 8000586:	d402      	bmi.n	800058e <_puts_r+0x36>
 8000588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800058a:	f000 facf 	bl	8000b2c <__retarget_lock_acquire_recursive>
 800058e:	89a3      	ldrh	r3, [r4, #12]
 8000590:	0719      	lsls	r1, r3, #28
 8000592:	d51d      	bpl.n	80005d0 <_puts_r+0x78>
 8000594:	6923      	ldr	r3, [r4, #16]
 8000596:	b1db      	cbz	r3, 80005d0 <_puts_r+0x78>
 8000598:	3e01      	subs	r6, #1
 800059a:	68a3      	ldr	r3, [r4, #8]
 800059c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005a0:	3b01      	subs	r3, #1
 80005a2:	60a3      	str	r3, [r4, #8]
 80005a4:	bb39      	cbnz	r1, 80005f6 <_puts_r+0x9e>
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	da38      	bge.n	800061c <_puts_r+0xc4>
 80005aa:	4622      	mov	r2, r4
 80005ac:	210a      	movs	r1, #10
 80005ae:	4628      	mov	r0, r5
 80005b0:	f000 f848 	bl	8000644 <__swbuf_r>
 80005b4:	3001      	adds	r0, #1
 80005b6:	d011      	beq.n	80005dc <_puts_r+0x84>
 80005b8:	250a      	movs	r5, #10
 80005ba:	e011      	b.n	80005e0 <_puts_r+0x88>
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <_puts_r+0xd4>)
 80005be:	429c      	cmp	r4, r3
 80005c0:	d101      	bne.n	80005c6 <_puts_r+0x6e>
 80005c2:	68ac      	ldr	r4, [r5, #8]
 80005c4:	e7da      	b.n	800057c <_puts_r+0x24>
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <_puts_r+0xd8>)
 80005c8:	429c      	cmp	r4, r3
 80005ca:	bf08      	it	eq
 80005cc:	68ec      	ldreq	r4, [r5, #12]
 80005ce:	e7d5      	b.n	800057c <_puts_r+0x24>
 80005d0:	4621      	mov	r1, r4
 80005d2:	4628      	mov	r0, r5
 80005d4:	f000 f888 	bl	80006e8 <__swsetup_r>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d0dd      	beq.n	8000598 <_puts_r+0x40>
 80005dc:	f04f 35ff 	mov.w	r5, #4294967295
 80005e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005e2:	07da      	lsls	r2, r3, #31
 80005e4:	d405      	bmi.n	80005f2 <_puts_r+0x9a>
 80005e6:	89a3      	ldrh	r3, [r4, #12]
 80005e8:	059b      	lsls	r3, r3, #22
 80005ea:	d402      	bmi.n	80005f2 <_puts_r+0x9a>
 80005ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005ee:	f000 fa9e 	bl	8000b2e <__retarget_lock_release_recursive>
 80005f2:	4628      	mov	r0, r5
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	da04      	bge.n	8000604 <_puts_r+0xac>
 80005fa:	69a2      	ldr	r2, [r4, #24]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dc06      	bgt.n	800060e <_puts_r+0xb6>
 8000600:	290a      	cmp	r1, #10
 8000602:	d004      	beq.n	800060e <_puts_r+0xb6>
 8000604:	6823      	ldr	r3, [r4, #0]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	6022      	str	r2, [r4, #0]
 800060a:	7019      	strb	r1, [r3, #0]
 800060c:	e7c5      	b.n	800059a <_puts_r+0x42>
 800060e:	4622      	mov	r2, r4
 8000610:	4628      	mov	r0, r5
 8000612:	f000 f817 	bl	8000644 <__swbuf_r>
 8000616:	3001      	adds	r0, #1
 8000618:	d1bf      	bne.n	800059a <_puts_r+0x42>
 800061a:	e7df      	b.n	80005dc <_puts_r+0x84>
 800061c:	6823      	ldr	r3, [r4, #0]
 800061e:	250a      	movs	r5, #10
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	6022      	str	r2, [r4, #0]
 8000624:	701d      	strb	r5, [r3, #0]
 8000626:	e7db      	b.n	80005e0 <_puts_r+0x88>
 8000628:	08001090 	.word	0x08001090
 800062c:	080010b0 	.word	0x080010b0
 8000630:	08001070 	.word	0x08001070

08000634 <puts>:
 8000634:	4b02      	ldr	r3, [pc, #8]	; (8000640 <puts+0xc>)
 8000636:	4601      	mov	r1, r0
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	f7ff bf8d 	b.w	8000558 <_puts_r>
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000

08000644 <__swbuf_r>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	460e      	mov	r6, r1
 8000648:	4614      	mov	r4, r2
 800064a:	4605      	mov	r5, r0
 800064c:	b118      	cbz	r0, 8000656 <__swbuf_r+0x12>
 800064e:	6983      	ldr	r3, [r0, #24]
 8000650:	b90b      	cbnz	r3, 8000656 <__swbuf_r+0x12>
 8000652:	f000 f9cd 	bl	80009f0 <__sinit>
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <__swbuf_r+0x98>)
 8000658:	429c      	cmp	r4, r3
 800065a:	d12b      	bne.n	80006b4 <__swbuf_r+0x70>
 800065c:	686c      	ldr	r4, [r5, #4]
 800065e:	69a3      	ldr	r3, [r4, #24]
 8000660:	60a3      	str	r3, [r4, #8]
 8000662:	89a3      	ldrh	r3, [r4, #12]
 8000664:	071a      	lsls	r2, r3, #28
 8000666:	d52f      	bpl.n	80006c8 <__swbuf_r+0x84>
 8000668:	6923      	ldr	r3, [r4, #16]
 800066a:	b36b      	cbz	r3, 80006c8 <__swbuf_r+0x84>
 800066c:	6923      	ldr	r3, [r4, #16]
 800066e:	6820      	ldr	r0, [r4, #0]
 8000670:	1ac0      	subs	r0, r0, r3
 8000672:	6963      	ldr	r3, [r4, #20]
 8000674:	b2f6      	uxtb	r6, r6
 8000676:	4283      	cmp	r3, r0
 8000678:	4637      	mov	r7, r6
 800067a:	dc04      	bgt.n	8000686 <__swbuf_r+0x42>
 800067c:	4621      	mov	r1, r4
 800067e:	4628      	mov	r0, r5
 8000680:	f000 f922 	bl	80008c8 <_fflush_r>
 8000684:	bb30      	cbnz	r0, 80006d4 <__swbuf_r+0x90>
 8000686:	68a3      	ldr	r3, [r4, #8]
 8000688:	3b01      	subs	r3, #1
 800068a:	60a3      	str	r3, [r4, #8]
 800068c:	6823      	ldr	r3, [r4, #0]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	6022      	str	r2, [r4, #0]
 8000692:	701e      	strb	r6, [r3, #0]
 8000694:	6963      	ldr	r3, [r4, #20]
 8000696:	3001      	adds	r0, #1
 8000698:	4283      	cmp	r3, r0
 800069a:	d004      	beq.n	80006a6 <__swbuf_r+0x62>
 800069c:	89a3      	ldrh	r3, [r4, #12]
 800069e:	07db      	lsls	r3, r3, #31
 80006a0:	d506      	bpl.n	80006b0 <__swbuf_r+0x6c>
 80006a2:	2e0a      	cmp	r6, #10
 80006a4:	d104      	bne.n	80006b0 <__swbuf_r+0x6c>
 80006a6:	4621      	mov	r1, r4
 80006a8:	4628      	mov	r0, r5
 80006aa:	f000 f90d 	bl	80008c8 <_fflush_r>
 80006ae:	b988      	cbnz	r0, 80006d4 <__swbuf_r+0x90>
 80006b0:	4638      	mov	r0, r7
 80006b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <__swbuf_r+0x9c>)
 80006b6:	429c      	cmp	r4, r3
 80006b8:	d101      	bne.n	80006be <__swbuf_r+0x7a>
 80006ba:	68ac      	ldr	r4, [r5, #8]
 80006bc:	e7cf      	b.n	800065e <__swbuf_r+0x1a>
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <__swbuf_r+0xa0>)
 80006c0:	429c      	cmp	r4, r3
 80006c2:	bf08      	it	eq
 80006c4:	68ec      	ldreq	r4, [r5, #12]
 80006c6:	e7ca      	b.n	800065e <__swbuf_r+0x1a>
 80006c8:	4621      	mov	r1, r4
 80006ca:	4628      	mov	r0, r5
 80006cc:	f000 f80c 	bl	80006e8 <__swsetup_r>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d0cb      	beq.n	800066c <__swbuf_r+0x28>
 80006d4:	f04f 37ff 	mov.w	r7, #4294967295
 80006d8:	e7ea      	b.n	80006b0 <__swbuf_r+0x6c>
 80006da:	bf00      	nop
 80006dc:	08001090 	.word	0x08001090
 80006e0:	080010b0 	.word	0x080010b0
 80006e4:	08001070 	.word	0x08001070

080006e8 <__swsetup_r>:
 80006e8:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <__swsetup_r+0xcc>)
 80006ea:	b570      	push	{r4, r5, r6, lr}
 80006ec:	681d      	ldr	r5, [r3, #0]
 80006ee:	4606      	mov	r6, r0
 80006f0:	460c      	mov	r4, r1
 80006f2:	b125      	cbz	r5, 80006fe <__swsetup_r+0x16>
 80006f4:	69ab      	ldr	r3, [r5, #24]
 80006f6:	b913      	cbnz	r3, 80006fe <__swsetup_r+0x16>
 80006f8:	4628      	mov	r0, r5
 80006fa:	f000 f979 	bl	80009f0 <__sinit>
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <__swsetup_r+0xd0>)
 8000700:	429c      	cmp	r4, r3
 8000702:	d10f      	bne.n	8000724 <__swsetup_r+0x3c>
 8000704:	686c      	ldr	r4, [r5, #4]
 8000706:	89a3      	ldrh	r3, [r4, #12]
 8000708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800070c:	0719      	lsls	r1, r3, #28
 800070e:	d42c      	bmi.n	800076a <__swsetup_r+0x82>
 8000710:	06dd      	lsls	r5, r3, #27
 8000712:	d411      	bmi.n	8000738 <__swsetup_r+0x50>
 8000714:	2309      	movs	r3, #9
 8000716:	6033      	str	r3, [r6, #0]
 8000718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800071c:	81a3      	strh	r3, [r4, #12]
 800071e:	f04f 30ff 	mov.w	r0, #4294967295
 8000722:	e03e      	b.n	80007a2 <__swsetup_r+0xba>
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <__swsetup_r+0xd4>)
 8000726:	429c      	cmp	r4, r3
 8000728:	d101      	bne.n	800072e <__swsetup_r+0x46>
 800072a:	68ac      	ldr	r4, [r5, #8]
 800072c:	e7eb      	b.n	8000706 <__swsetup_r+0x1e>
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <__swsetup_r+0xd8>)
 8000730:	429c      	cmp	r4, r3
 8000732:	bf08      	it	eq
 8000734:	68ec      	ldreq	r4, [r5, #12]
 8000736:	e7e6      	b.n	8000706 <__swsetup_r+0x1e>
 8000738:	0758      	lsls	r0, r3, #29
 800073a:	d512      	bpl.n	8000762 <__swsetup_r+0x7a>
 800073c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800073e:	b141      	cbz	r1, 8000752 <__swsetup_r+0x6a>
 8000740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000744:	4299      	cmp	r1, r3
 8000746:	d002      	beq.n	800074e <__swsetup_r+0x66>
 8000748:	4630      	mov	r0, r6
 800074a:	f000 fa57 	bl	8000bfc <_free_r>
 800074e:	2300      	movs	r3, #0
 8000750:	6363      	str	r3, [r4, #52]	; 0x34
 8000752:	89a3      	ldrh	r3, [r4, #12]
 8000754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000758:	81a3      	strh	r3, [r4, #12]
 800075a:	2300      	movs	r3, #0
 800075c:	6063      	str	r3, [r4, #4]
 800075e:	6923      	ldr	r3, [r4, #16]
 8000760:	6023      	str	r3, [r4, #0]
 8000762:	89a3      	ldrh	r3, [r4, #12]
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	81a3      	strh	r3, [r4, #12]
 800076a:	6923      	ldr	r3, [r4, #16]
 800076c:	b94b      	cbnz	r3, 8000782 <__swsetup_r+0x9a>
 800076e:	89a3      	ldrh	r3, [r4, #12]
 8000770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000778:	d003      	beq.n	8000782 <__swsetup_r+0x9a>
 800077a:	4621      	mov	r1, r4
 800077c:	4630      	mov	r0, r6
 800077e:	f000 f9fd 	bl	8000b7c <__smakebuf_r>
 8000782:	89a0      	ldrh	r0, [r4, #12]
 8000784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000788:	f010 0301 	ands.w	r3, r0, #1
 800078c:	d00a      	beq.n	80007a4 <__swsetup_r+0xbc>
 800078e:	2300      	movs	r3, #0
 8000790:	60a3      	str	r3, [r4, #8]
 8000792:	6963      	ldr	r3, [r4, #20]
 8000794:	425b      	negs	r3, r3
 8000796:	61a3      	str	r3, [r4, #24]
 8000798:	6923      	ldr	r3, [r4, #16]
 800079a:	b943      	cbnz	r3, 80007ae <__swsetup_r+0xc6>
 800079c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80007a0:	d1ba      	bne.n	8000718 <__swsetup_r+0x30>
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	0781      	lsls	r1, r0, #30
 80007a6:	bf58      	it	pl
 80007a8:	6963      	ldrpl	r3, [r4, #20]
 80007aa:	60a3      	str	r3, [r4, #8]
 80007ac:	e7f4      	b.n	8000798 <__swsetup_r+0xb0>
 80007ae:	2000      	movs	r0, #0
 80007b0:	e7f7      	b.n	80007a2 <__swsetup_r+0xba>
 80007b2:	bf00      	nop
 80007b4:	20000000 	.word	0x20000000
 80007b8:	08001090 	.word	0x08001090
 80007bc:	080010b0 	.word	0x080010b0
 80007c0:	08001070 	.word	0x08001070

080007c4 <__sflush_r>:
 80007c4:	898a      	ldrh	r2, [r1, #12]
 80007c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c8:	4605      	mov	r5, r0
 80007ca:	0710      	lsls	r0, r2, #28
 80007cc:	460c      	mov	r4, r1
 80007ce:	d457      	bmi.n	8000880 <__sflush_r+0xbc>
 80007d0:	684b      	ldr	r3, [r1, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	dc04      	bgt.n	80007e0 <__sflush_r+0x1c>
 80007d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dc01      	bgt.n	80007e0 <__sflush_r+0x1c>
 80007dc:	2000      	movs	r0, #0
 80007de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d0fa      	beq.n	80007dc <__sflush_r+0x18>
 80007e6:	2300      	movs	r3, #0
 80007e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007ec:	682f      	ldr	r7, [r5, #0]
 80007ee:	602b      	str	r3, [r5, #0]
 80007f0:	d032      	beq.n	8000858 <__sflush_r+0x94>
 80007f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80007f4:	89a3      	ldrh	r3, [r4, #12]
 80007f6:	075a      	lsls	r2, r3, #29
 80007f8:	d505      	bpl.n	8000806 <__sflush_r+0x42>
 80007fa:	6863      	ldr	r3, [r4, #4]
 80007fc:	1ac0      	subs	r0, r0, r3
 80007fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000800:	b10b      	cbz	r3, 8000806 <__sflush_r+0x42>
 8000802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000804:	1ac0      	subs	r0, r0, r3
 8000806:	2300      	movs	r3, #0
 8000808:	4602      	mov	r2, r0
 800080a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800080c:	6a21      	ldr	r1, [r4, #32]
 800080e:	4628      	mov	r0, r5
 8000810:	47b0      	blx	r6
 8000812:	1c43      	adds	r3, r0, #1
 8000814:	89a3      	ldrh	r3, [r4, #12]
 8000816:	d106      	bne.n	8000826 <__sflush_r+0x62>
 8000818:	6829      	ldr	r1, [r5, #0]
 800081a:	291d      	cmp	r1, #29
 800081c:	d82c      	bhi.n	8000878 <__sflush_r+0xb4>
 800081e:	4a29      	ldr	r2, [pc, #164]	; (80008c4 <__sflush_r+0x100>)
 8000820:	40ca      	lsrs	r2, r1
 8000822:	07d6      	lsls	r6, r2, #31
 8000824:	d528      	bpl.n	8000878 <__sflush_r+0xb4>
 8000826:	2200      	movs	r2, #0
 8000828:	6062      	str	r2, [r4, #4]
 800082a:	04d9      	lsls	r1, r3, #19
 800082c:	6922      	ldr	r2, [r4, #16]
 800082e:	6022      	str	r2, [r4, #0]
 8000830:	d504      	bpl.n	800083c <__sflush_r+0x78>
 8000832:	1c42      	adds	r2, r0, #1
 8000834:	d101      	bne.n	800083a <__sflush_r+0x76>
 8000836:	682b      	ldr	r3, [r5, #0]
 8000838:	b903      	cbnz	r3, 800083c <__sflush_r+0x78>
 800083a:	6560      	str	r0, [r4, #84]	; 0x54
 800083c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800083e:	602f      	str	r7, [r5, #0]
 8000840:	2900      	cmp	r1, #0
 8000842:	d0cb      	beq.n	80007dc <__sflush_r+0x18>
 8000844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000848:	4299      	cmp	r1, r3
 800084a:	d002      	beq.n	8000852 <__sflush_r+0x8e>
 800084c:	4628      	mov	r0, r5
 800084e:	f000 f9d5 	bl	8000bfc <_free_r>
 8000852:	2000      	movs	r0, #0
 8000854:	6360      	str	r0, [r4, #52]	; 0x34
 8000856:	e7c2      	b.n	80007de <__sflush_r+0x1a>
 8000858:	6a21      	ldr	r1, [r4, #32]
 800085a:	2301      	movs	r3, #1
 800085c:	4628      	mov	r0, r5
 800085e:	47b0      	blx	r6
 8000860:	1c41      	adds	r1, r0, #1
 8000862:	d1c7      	bne.n	80007f4 <__sflush_r+0x30>
 8000864:	682b      	ldr	r3, [r5, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0c4      	beq.n	80007f4 <__sflush_r+0x30>
 800086a:	2b1d      	cmp	r3, #29
 800086c:	d001      	beq.n	8000872 <__sflush_r+0xae>
 800086e:	2b16      	cmp	r3, #22
 8000870:	d101      	bne.n	8000876 <__sflush_r+0xb2>
 8000872:	602f      	str	r7, [r5, #0]
 8000874:	e7b2      	b.n	80007dc <__sflush_r+0x18>
 8000876:	89a3      	ldrh	r3, [r4, #12]
 8000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087c:	81a3      	strh	r3, [r4, #12]
 800087e:	e7ae      	b.n	80007de <__sflush_r+0x1a>
 8000880:	690f      	ldr	r7, [r1, #16]
 8000882:	2f00      	cmp	r7, #0
 8000884:	d0aa      	beq.n	80007dc <__sflush_r+0x18>
 8000886:	0793      	lsls	r3, r2, #30
 8000888:	680e      	ldr	r6, [r1, #0]
 800088a:	bf08      	it	eq
 800088c:	694b      	ldreq	r3, [r1, #20]
 800088e:	600f      	str	r7, [r1, #0]
 8000890:	bf18      	it	ne
 8000892:	2300      	movne	r3, #0
 8000894:	1bf6      	subs	r6, r6, r7
 8000896:	608b      	str	r3, [r1, #8]
 8000898:	2e00      	cmp	r6, #0
 800089a:	dd9f      	ble.n	80007dc <__sflush_r+0x18>
 800089c:	6a21      	ldr	r1, [r4, #32]
 800089e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80008a2:	4633      	mov	r3, r6
 80008a4:	463a      	mov	r2, r7
 80008a6:	4628      	mov	r0, r5
 80008a8:	47e0      	blx	ip
 80008aa:	2800      	cmp	r0, #0
 80008ac:	dc06      	bgt.n	80008bc <__sflush_r+0xf8>
 80008ae:	89a3      	ldrh	r3, [r4, #12]
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	81a3      	strh	r3, [r4, #12]
 80008b6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ba:	e790      	b.n	80007de <__sflush_r+0x1a>
 80008bc:	4407      	add	r7, r0
 80008be:	1a36      	subs	r6, r6, r0
 80008c0:	e7ea      	b.n	8000898 <__sflush_r+0xd4>
 80008c2:	bf00      	nop
 80008c4:	20400001 	.word	0x20400001

080008c8 <_fflush_r>:
 80008c8:	b538      	push	{r3, r4, r5, lr}
 80008ca:	690b      	ldr	r3, [r1, #16]
 80008cc:	4605      	mov	r5, r0
 80008ce:	460c      	mov	r4, r1
 80008d0:	b913      	cbnz	r3, 80008d8 <_fflush_r+0x10>
 80008d2:	2500      	movs	r5, #0
 80008d4:	4628      	mov	r0, r5
 80008d6:	bd38      	pop	{r3, r4, r5, pc}
 80008d8:	b118      	cbz	r0, 80008e2 <_fflush_r+0x1a>
 80008da:	6983      	ldr	r3, [r0, #24]
 80008dc:	b90b      	cbnz	r3, 80008e2 <_fflush_r+0x1a>
 80008de:	f000 f887 	bl	80009f0 <__sinit>
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <_fflush_r+0x6c>)
 80008e4:	429c      	cmp	r4, r3
 80008e6:	d11b      	bne.n	8000920 <_fflush_r+0x58>
 80008e8:	686c      	ldr	r4, [r5, #4]
 80008ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0ef      	beq.n	80008d2 <_fflush_r+0xa>
 80008f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80008f4:	07d0      	lsls	r0, r2, #31
 80008f6:	d404      	bmi.n	8000902 <_fflush_r+0x3a>
 80008f8:	0599      	lsls	r1, r3, #22
 80008fa:	d402      	bmi.n	8000902 <_fflush_r+0x3a>
 80008fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008fe:	f000 f915 	bl	8000b2c <__retarget_lock_acquire_recursive>
 8000902:	4628      	mov	r0, r5
 8000904:	4621      	mov	r1, r4
 8000906:	f7ff ff5d 	bl	80007c4 <__sflush_r>
 800090a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800090c:	07da      	lsls	r2, r3, #31
 800090e:	4605      	mov	r5, r0
 8000910:	d4e0      	bmi.n	80008d4 <_fflush_r+0xc>
 8000912:	89a3      	ldrh	r3, [r4, #12]
 8000914:	059b      	lsls	r3, r3, #22
 8000916:	d4dd      	bmi.n	80008d4 <_fflush_r+0xc>
 8000918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800091a:	f000 f908 	bl	8000b2e <__retarget_lock_release_recursive>
 800091e:	e7d9      	b.n	80008d4 <_fflush_r+0xc>
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <_fflush_r+0x70>)
 8000922:	429c      	cmp	r4, r3
 8000924:	d101      	bne.n	800092a <_fflush_r+0x62>
 8000926:	68ac      	ldr	r4, [r5, #8]
 8000928:	e7df      	b.n	80008ea <_fflush_r+0x22>
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <_fflush_r+0x74>)
 800092c:	429c      	cmp	r4, r3
 800092e:	bf08      	it	eq
 8000930:	68ec      	ldreq	r4, [r5, #12]
 8000932:	e7da      	b.n	80008ea <_fflush_r+0x22>
 8000934:	08001090 	.word	0x08001090
 8000938:	080010b0 	.word	0x080010b0
 800093c:	08001070 	.word	0x08001070

08000940 <std>:
 8000940:	2300      	movs	r3, #0
 8000942:	b510      	push	{r4, lr}
 8000944:	4604      	mov	r4, r0
 8000946:	e9c0 3300 	strd	r3, r3, [r0]
 800094a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800094e:	6083      	str	r3, [r0, #8]
 8000950:	8181      	strh	r1, [r0, #12]
 8000952:	6643      	str	r3, [r0, #100]	; 0x64
 8000954:	81c2      	strh	r2, [r0, #14]
 8000956:	6183      	str	r3, [r0, #24]
 8000958:	4619      	mov	r1, r3
 800095a:	2208      	movs	r2, #8
 800095c:	305c      	adds	r0, #92	; 0x5c
 800095e:	f7ff fdf3 	bl	8000548 <memset>
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <std+0x38>)
 8000964:	6263      	str	r3, [r4, #36]	; 0x24
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <std+0x3c>)
 8000968:	62a3      	str	r3, [r4, #40]	; 0x28
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <std+0x40>)
 800096c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <std+0x44>)
 8000970:	6224      	str	r4, [r4, #32]
 8000972:	6323      	str	r3, [r4, #48]	; 0x30
 8000974:	bd10      	pop	{r4, pc}
 8000976:	bf00      	nop
 8000978:	08000dd9 	.word	0x08000dd9
 800097c:	08000dfb 	.word	0x08000dfb
 8000980:	08000e33 	.word	0x08000e33
 8000984:	08000e57 	.word	0x08000e57

08000988 <_cleanup_r>:
 8000988:	4901      	ldr	r1, [pc, #4]	; (8000990 <_cleanup_r+0x8>)
 800098a:	f000 b8af 	b.w	8000aec <_fwalk_reent>
 800098e:	bf00      	nop
 8000990:	080008c9 	.word	0x080008c9

08000994 <__sfmoreglue>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	2268      	movs	r2, #104	; 0x68
 8000998:	1e4d      	subs	r5, r1, #1
 800099a:	4355      	muls	r5, r2
 800099c:	460e      	mov	r6, r1
 800099e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009a2:	f000 f995 	bl	8000cd0 <_malloc_r>
 80009a6:	4604      	mov	r4, r0
 80009a8:	b140      	cbz	r0, 80009bc <__sfmoreglue+0x28>
 80009aa:	2100      	movs	r1, #0
 80009ac:	e9c0 1600 	strd	r1, r6, [r0]
 80009b0:	300c      	adds	r0, #12
 80009b2:	60a0      	str	r0, [r4, #8]
 80009b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009b8:	f7ff fdc6 	bl	8000548 <memset>
 80009bc:	4620      	mov	r0, r4
 80009be:	bd70      	pop	{r4, r5, r6, pc}

080009c0 <__sfp_lock_acquire>:
 80009c0:	4801      	ldr	r0, [pc, #4]	; (80009c8 <__sfp_lock_acquire+0x8>)
 80009c2:	f000 b8b3 	b.w	8000b2c <__retarget_lock_acquire_recursive>
 80009c6:	bf00      	nop
 80009c8:	20000085 	.word	0x20000085

080009cc <__sfp_lock_release>:
 80009cc:	4801      	ldr	r0, [pc, #4]	; (80009d4 <__sfp_lock_release+0x8>)
 80009ce:	f000 b8ae 	b.w	8000b2e <__retarget_lock_release_recursive>
 80009d2:	bf00      	nop
 80009d4:	20000085 	.word	0x20000085

080009d8 <__sinit_lock_acquire>:
 80009d8:	4801      	ldr	r0, [pc, #4]	; (80009e0 <__sinit_lock_acquire+0x8>)
 80009da:	f000 b8a7 	b.w	8000b2c <__retarget_lock_acquire_recursive>
 80009de:	bf00      	nop
 80009e0:	20000086 	.word	0x20000086

080009e4 <__sinit_lock_release>:
 80009e4:	4801      	ldr	r0, [pc, #4]	; (80009ec <__sinit_lock_release+0x8>)
 80009e6:	f000 b8a2 	b.w	8000b2e <__retarget_lock_release_recursive>
 80009ea:	bf00      	nop
 80009ec:	20000086 	.word	0x20000086

080009f0 <__sinit>:
 80009f0:	b510      	push	{r4, lr}
 80009f2:	4604      	mov	r4, r0
 80009f4:	f7ff fff0 	bl	80009d8 <__sinit_lock_acquire>
 80009f8:	69a3      	ldr	r3, [r4, #24]
 80009fa:	b11b      	cbz	r3, 8000a04 <__sinit+0x14>
 80009fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a00:	f7ff bff0 	b.w	80009e4 <__sinit_lock_release>
 8000a04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a08:	6523      	str	r3, [r4, #80]	; 0x50
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <__sinit+0x68>)
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <__sinit+0x6c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a12:	42a3      	cmp	r3, r4
 8000a14:	bf04      	itt	eq
 8000a16:	2301      	moveq	r3, #1
 8000a18:	61a3      	streq	r3, [r4, #24]
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f000 f820 	bl	8000a60 <__sfp>
 8000a20:	6060      	str	r0, [r4, #4]
 8000a22:	4620      	mov	r0, r4
 8000a24:	f000 f81c 	bl	8000a60 <__sfp>
 8000a28:	60a0      	str	r0, [r4, #8]
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f000 f818 	bl	8000a60 <__sfp>
 8000a30:	2200      	movs	r2, #0
 8000a32:	60e0      	str	r0, [r4, #12]
 8000a34:	2104      	movs	r1, #4
 8000a36:	6860      	ldr	r0, [r4, #4]
 8000a38:	f7ff ff82 	bl	8000940 <std>
 8000a3c:	68a0      	ldr	r0, [r4, #8]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2109      	movs	r1, #9
 8000a42:	f7ff ff7d 	bl	8000940 <std>
 8000a46:	68e0      	ldr	r0, [r4, #12]
 8000a48:	2202      	movs	r2, #2
 8000a4a:	2112      	movs	r1, #18
 8000a4c:	f7ff ff78 	bl	8000940 <std>
 8000a50:	2301      	movs	r3, #1
 8000a52:	61a3      	str	r3, [r4, #24]
 8000a54:	e7d2      	b.n	80009fc <__sinit+0xc>
 8000a56:	bf00      	nop
 8000a58:	0800106c 	.word	0x0800106c
 8000a5c:	08000989 	.word	0x08000989

08000a60 <__sfp>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	4607      	mov	r7, r0
 8000a64:	f7ff ffac 	bl	80009c0 <__sfp_lock_acquire>
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <__sfp+0x84>)
 8000a6a:	681e      	ldr	r6, [r3, #0]
 8000a6c:	69b3      	ldr	r3, [r6, #24]
 8000a6e:	b913      	cbnz	r3, 8000a76 <__sfp+0x16>
 8000a70:	4630      	mov	r0, r6
 8000a72:	f7ff ffbd 	bl	80009f0 <__sinit>
 8000a76:	3648      	adds	r6, #72	; 0x48
 8000a78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	d503      	bpl.n	8000a88 <__sfp+0x28>
 8000a80:	6833      	ldr	r3, [r6, #0]
 8000a82:	b30b      	cbz	r3, 8000ac8 <__sfp+0x68>
 8000a84:	6836      	ldr	r6, [r6, #0]
 8000a86:	e7f7      	b.n	8000a78 <__sfp+0x18>
 8000a88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a8c:	b9d5      	cbnz	r5, 8000ac4 <__sfp+0x64>
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <__sfp+0x88>)
 8000a90:	60e3      	str	r3, [r4, #12]
 8000a92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a96:	6665      	str	r5, [r4, #100]	; 0x64
 8000a98:	f000 f847 	bl	8000b2a <__retarget_lock_init_recursive>
 8000a9c:	f7ff ff96 	bl	80009cc <__sfp_lock_release>
 8000aa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000aa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000aa8:	6025      	str	r5, [r4, #0]
 8000aaa:	61a5      	str	r5, [r4, #24]
 8000aac:	2208      	movs	r2, #8
 8000aae:	4629      	mov	r1, r5
 8000ab0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ab4:	f7ff fd48 	bl	8000548 <memset>
 8000ab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000abc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac4:	3468      	adds	r4, #104	; 0x68
 8000ac6:	e7d9      	b.n	8000a7c <__sfp+0x1c>
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4638      	mov	r0, r7
 8000acc:	f7ff ff62 	bl	8000994 <__sfmoreglue>
 8000ad0:	4604      	mov	r4, r0
 8000ad2:	6030      	str	r0, [r6, #0]
 8000ad4:	2800      	cmp	r0, #0
 8000ad6:	d1d5      	bne.n	8000a84 <__sfp+0x24>
 8000ad8:	f7ff ff78 	bl	80009cc <__sfp_lock_release>
 8000adc:	230c      	movs	r3, #12
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	e7ee      	b.n	8000ac0 <__sfp+0x60>
 8000ae2:	bf00      	nop
 8000ae4:	0800106c 	.word	0x0800106c
 8000ae8:	ffff0001 	.word	0xffff0001

08000aec <_fwalk_reent>:
 8000aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000af0:	4606      	mov	r6, r0
 8000af2:	4688      	mov	r8, r1
 8000af4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000af8:	2700      	movs	r7, #0
 8000afa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000afe:	f1b9 0901 	subs.w	r9, r9, #1
 8000b02:	d505      	bpl.n	8000b10 <_fwalk_reent+0x24>
 8000b04:	6824      	ldr	r4, [r4, #0]
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d1f7      	bne.n	8000afa <_fwalk_reent+0xe>
 8000b0a:	4638      	mov	r0, r7
 8000b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b10:	89ab      	ldrh	r3, [r5, #12]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d907      	bls.n	8000b26 <_fwalk_reent+0x3a>
 8000b16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	d003      	beq.n	8000b26 <_fwalk_reent+0x3a>
 8000b1e:	4629      	mov	r1, r5
 8000b20:	4630      	mov	r0, r6
 8000b22:	47c0      	blx	r8
 8000b24:	4307      	orrs	r7, r0
 8000b26:	3568      	adds	r5, #104	; 0x68
 8000b28:	e7e9      	b.n	8000afe <_fwalk_reent+0x12>

08000b2a <__retarget_lock_init_recursive>:
 8000b2a:	4770      	bx	lr

08000b2c <__retarget_lock_acquire_recursive>:
 8000b2c:	4770      	bx	lr

08000b2e <__retarget_lock_release_recursive>:
 8000b2e:	4770      	bx	lr

08000b30 <__swhatbuf_r>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	460e      	mov	r6, r1
 8000b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	b096      	sub	sp, #88	; 0x58
 8000b3c:	4614      	mov	r4, r2
 8000b3e:	461d      	mov	r5, r3
 8000b40:	da08      	bge.n	8000b54 <__swhatbuf_r+0x24>
 8000b42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000b46:	2200      	movs	r2, #0
 8000b48:	602a      	str	r2, [r5, #0]
 8000b4a:	061a      	lsls	r2, r3, #24
 8000b4c:	d410      	bmi.n	8000b70 <__swhatbuf_r+0x40>
 8000b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b52:	e00e      	b.n	8000b72 <__swhatbuf_r+0x42>
 8000b54:	466a      	mov	r2, sp
 8000b56:	f000 f9a5 	bl	8000ea4 <_fstat_r>
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	dbf1      	blt.n	8000b42 <__swhatbuf_r+0x12>
 8000b5e:	9a01      	ldr	r2, [sp, #4]
 8000b60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b68:	425a      	negs	r2, r3
 8000b6a:	415a      	adcs	r2, r3
 8000b6c:	602a      	str	r2, [r5, #0]
 8000b6e:	e7ee      	b.n	8000b4e <__swhatbuf_r+0x1e>
 8000b70:	2340      	movs	r3, #64	; 0x40
 8000b72:	2000      	movs	r0, #0
 8000b74:	6023      	str	r3, [r4, #0]
 8000b76:	b016      	add	sp, #88	; 0x58
 8000b78:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b7c <__smakebuf_r>:
 8000b7c:	898b      	ldrh	r3, [r1, #12]
 8000b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b80:	079d      	lsls	r5, r3, #30
 8000b82:	4606      	mov	r6, r0
 8000b84:	460c      	mov	r4, r1
 8000b86:	d507      	bpl.n	8000b98 <__smakebuf_r+0x1c>
 8000b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b8c:	6023      	str	r3, [r4, #0]
 8000b8e:	6123      	str	r3, [r4, #16]
 8000b90:	2301      	movs	r3, #1
 8000b92:	6163      	str	r3, [r4, #20]
 8000b94:	b002      	add	sp, #8
 8000b96:	bd70      	pop	{r4, r5, r6, pc}
 8000b98:	ab01      	add	r3, sp, #4
 8000b9a:	466a      	mov	r2, sp
 8000b9c:	f7ff ffc8 	bl	8000b30 <__swhatbuf_r>
 8000ba0:	9900      	ldr	r1, [sp, #0]
 8000ba2:	4605      	mov	r5, r0
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f000 f893 	bl	8000cd0 <_malloc_r>
 8000baa:	b948      	cbnz	r0, 8000bc0 <__smakebuf_r+0x44>
 8000bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bb0:	059a      	lsls	r2, r3, #22
 8000bb2:	d4ef      	bmi.n	8000b94 <__smakebuf_r+0x18>
 8000bb4:	f023 0303 	bic.w	r3, r3, #3
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	81a3      	strh	r3, [r4, #12]
 8000bbe:	e7e3      	b.n	8000b88 <__smakebuf_r+0xc>
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <__smakebuf_r+0x7c>)
 8000bc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8000bc4:	89a3      	ldrh	r3, [r4, #12]
 8000bc6:	6020      	str	r0, [r4, #0]
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	81a3      	strh	r3, [r4, #12]
 8000bce:	9b00      	ldr	r3, [sp, #0]
 8000bd0:	6163      	str	r3, [r4, #20]
 8000bd2:	9b01      	ldr	r3, [sp, #4]
 8000bd4:	6120      	str	r0, [r4, #16]
 8000bd6:	b15b      	cbz	r3, 8000bf0 <__smakebuf_r+0x74>
 8000bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bdc:	4630      	mov	r0, r6
 8000bde:	f000 f973 	bl	8000ec8 <_isatty_r>
 8000be2:	b128      	cbz	r0, 8000bf0 <__smakebuf_r+0x74>
 8000be4:	89a3      	ldrh	r3, [r4, #12]
 8000be6:	f023 0303 	bic.w	r3, r3, #3
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	81a3      	strh	r3, [r4, #12]
 8000bf0:	89a0      	ldrh	r0, [r4, #12]
 8000bf2:	4305      	orrs	r5, r0
 8000bf4:	81a5      	strh	r5, [r4, #12]
 8000bf6:	e7cd      	b.n	8000b94 <__smakebuf_r+0x18>
 8000bf8:	08000989 	.word	0x08000989

08000bfc <_free_r>:
 8000bfc:	b538      	push	{r3, r4, r5, lr}
 8000bfe:	4605      	mov	r5, r0
 8000c00:	2900      	cmp	r1, #0
 8000c02:	d041      	beq.n	8000c88 <_free_r+0x8c>
 8000c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c08:	1f0c      	subs	r4, r1, #4
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bfb8      	it	lt
 8000c0e:	18e4      	addlt	r4, r4, r3
 8000c10:	f000 f97c 	bl	8000f0c <__malloc_lock>
 8000c14:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <_free_r+0x90>)
 8000c16:	6813      	ldr	r3, [r2, #0]
 8000c18:	b933      	cbnz	r3, 8000c28 <_free_r+0x2c>
 8000c1a:	6063      	str	r3, [r4, #4]
 8000c1c:	6014      	str	r4, [r2, #0]
 8000c1e:	4628      	mov	r0, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b978 	b.w	8000f18 <__malloc_unlock>
 8000c28:	42a3      	cmp	r3, r4
 8000c2a:	d908      	bls.n	8000c3e <_free_r+0x42>
 8000c2c:	6820      	ldr	r0, [r4, #0]
 8000c2e:	1821      	adds	r1, r4, r0
 8000c30:	428b      	cmp	r3, r1
 8000c32:	bf01      	itttt	eq
 8000c34:	6819      	ldreq	r1, [r3, #0]
 8000c36:	685b      	ldreq	r3, [r3, #4]
 8000c38:	1809      	addeq	r1, r1, r0
 8000c3a:	6021      	streq	r1, [r4, #0]
 8000c3c:	e7ed      	b.n	8000c1a <_free_r+0x1e>
 8000c3e:	461a      	mov	r2, r3
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	b10b      	cbz	r3, 8000c48 <_free_r+0x4c>
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	d9fa      	bls.n	8000c3e <_free_r+0x42>
 8000c48:	6811      	ldr	r1, [r2, #0]
 8000c4a:	1850      	adds	r0, r2, r1
 8000c4c:	42a0      	cmp	r0, r4
 8000c4e:	d10b      	bne.n	8000c68 <_free_r+0x6c>
 8000c50:	6820      	ldr	r0, [r4, #0]
 8000c52:	4401      	add	r1, r0
 8000c54:	1850      	adds	r0, r2, r1
 8000c56:	4283      	cmp	r3, r0
 8000c58:	6011      	str	r1, [r2, #0]
 8000c5a:	d1e0      	bne.n	8000c1e <_free_r+0x22>
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	6053      	str	r3, [r2, #4]
 8000c62:	4401      	add	r1, r0
 8000c64:	6011      	str	r1, [r2, #0]
 8000c66:	e7da      	b.n	8000c1e <_free_r+0x22>
 8000c68:	d902      	bls.n	8000c70 <_free_r+0x74>
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	602b      	str	r3, [r5, #0]
 8000c6e:	e7d6      	b.n	8000c1e <_free_r+0x22>
 8000c70:	6820      	ldr	r0, [r4, #0]
 8000c72:	1821      	adds	r1, r4, r0
 8000c74:	428b      	cmp	r3, r1
 8000c76:	bf04      	itt	eq
 8000c78:	6819      	ldreq	r1, [r3, #0]
 8000c7a:	685b      	ldreq	r3, [r3, #4]
 8000c7c:	6063      	str	r3, [r4, #4]
 8000c7e:	bf04      	itt	eq
 8000c80:	1809      	addeq	r1, r1, r0
 8000c82:	6021      	streq	r1, [r4, #0]
 8000c84:	6054      	str	r4, [r2, #4]
 8000c86:	e7ca      	b.n	8000c1e <_free_r+0x22>
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000088 	.word	0x20000088

08000c90 <sbrk_aligned>:
 8000c90:	b570      	push	{r4, r5, r6, lr}
 8000c92:	4e0e      	ldr	r6, [pc, #56]	; (8000ccc <sbrk_aligned+0x3c>)
 8000c94:	460c      	mov	r4, r1
 8000c96:	6831      	ldr	r1, [r6, #0]
 8000c98:	4605      	mov	r5, r0
 8000c9a:	b911      	cbnz	r1, 8000ca2 <sbrk_aligned+0x12>
 8000c9c:	f000 f88c 	bl	8000db8 <_sbrk_r>
 8000ca0:	6030      	str	r0, [r6, #0]
 8000ca2:	4621      	mov	r1, r4
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	f000 f887 	bl	8000db8 <_sbrk_r>
 8000caa:	1c43      	adds	r3, r0, #1
 8000cac:	d00a      	beq.n	8000cc4 <sbrk_aligned+0x34>
 8000cae:	1cc4      	adds	r4, r0, #3
 8000cb0:	f024 0403 	bic.w	r4, r4, #3
 8000cb4:	42a0      	cmp	r0, r4
 8000cb6:	d007      	beq.n	8000cc8 <sbrk_aligned+0x38>
 8000cb8:	1a21      	subs	r1, r4, r0
 8000cba:	4628      	mov	r0, r5
 8000cbc:	f000 f87c 	bl	8000db8 <_sbrk_r>
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	d101      	bne.n	8000cc8 <sbrk_aligned+0x38>
 8000cc4:	f04f 34ff 	mov.w	r4, #4294967295
 8000cc8:	4620      	mov	r0, r4
 8000cca:	bd70      	pop	{r4, r5, r6, pc}
 8000ccc:	2000008c 	.word	0x2000008c

08000cd0 <_malloc_r>:
 8000cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cd4:	1ccd      	adds	r5, r1, #3
 8000cd6:	f025 0503 	bic.w	r5, r5, #3
 8000cda:	3508      	adds	r5, #8
 8000cdc:	2d0c      	cmp	r5, #12
 8000cde:	bf38      	it	cc
 8000ce0:	250c      	movcc	r5, #12
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	4607      	mov	r7, r0
 8000ce6:	db01      	blt.n	8000cec <_malloc_r+0x1c>
 8000ce8:	42a9      	cmp	r1, r5
 8000cea:	d905      	bls.n	8000cf8 <_malloc_r+0x28>
 8000cec:	230c      	movs	r3, #12
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cf8:	4e2e      	ldr	r6, [pc, #184]	; (8000db4 <_malloc_r+0xe4>)
 8000cfa:	f000 f907 	bl	8000f0c <__malloc_lock>
 8000cfe:	6833      	ldr	r3, [r6, #0]
 8000d00:	461c      	mov	r4, r3
 8000d02:	bb34      	cbnz	r4, 8000d52 <_malloc_r+0x82>
 8000d04:	4629      	mov	r1, r5
 8000d06:	4638      	mov	r0, r7
 8000d08:	f7ff ffc2 	bl	8000c90 <sbrk_aligned>
 8000d0c:	1c43      	adds	r3, r0, #1
 8000d0e:	4604      	mov	r4, r0
 8000d10:	d14d      	bne.n	8000dae <_malloc_r+0xde>
 8000d12:	6834      	ldr	r4, [r6, #0]
 8000d14:	4626      	mov	r6, r4
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d140      	bne.n	8000d9c <_malloc_r+0xcc>
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	4638      	mov	r0, r7
 8000d20:	eb04 0803 	add.w	r8, r4, r3
 8000d24:	f000 f848 	bl	8000db8 <_sbrk_r>
 8000d28:	4580      	cmp	r8, r0
 8000d2a:	d13a      	bne.n	8000da2 <_malloc_r+0xd2>
 8000d2c:	6821      	ldr	r1, [r4, #0]
 8000d2e:	3503      	adds	r5, #3
 8000d30:	1a6d      	subs	r5, r5, r1
 8000d32:	f025 0503 	bic.w	r5, r5, #3
 8000d36:	3508      	adds	r5, #8
 8000d38:	2d0c      	cmp	r5, #12
 8000d3a:	bf38      	it	cc
 8000d3c:	250c      	movcc	r5, #12
 8000d3e:	4629      	mov	r1, r5
 8000d40:	4638      	mov	r0, r7
 8000d42:	f7ff ffa5 	bl	8000c90 <sbrk_aligned>
 8000d46:	3001      	adds	r0, #1
 8000d48:	d02b      	beq.n	8000da2 <_malloc_r+0xd2>
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	442b      	add	r3, r5
 8000d4e:	6023      	str	r3, [r4, #0]
 8000d50:	e00e      	b.n	8000d70 <_malloc_r+0xa0>
 8000d52:	6822      	ldr	r2, [r4, #0]
 8000d54:	1b52      	subs	r2, r2, r5
 8000d56:	d41e      	bmi.n	8000d96 <_malloc_r+0xc6>
 8000d58:	2a0b      	cmp	r2, #11
 8000d5a:	d916      	bls.n	8000d8a <_malloc_r+0xba>
 8000d5c:	1961      	adds	r1, r4, r5
 8000d5e:	42a3      	cmp	r3, r4
 8000d60:	6025      	str	r5, [r4, #0]
 8000d62:	bf18      	it	ne
 8000d64:	6059      	strne	r1, [r3, #4]
 8000d66:	6863      	ldr	r3, [r4, #4]
 8000d68:	bf08      	it	eq
 8000d6a:	6031      	streq	r1, [r6, #0]
 8000d6c:	5162      	str	r2, [r4, r5]
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	4638      	mov	r0, r7
 8000d72:	f104 060b 	add.w	r6, r4, #11
 8000d76:	f000 f8cf 	bl	8000f18 <__malloc_unlock>
 8000d7a:	f026 0607 	bic.w	r6, r6, #7
 8000d7e:	1d23      	adds	r3, r4, #4
 8000d80:	1af2      	subs	r2, r6, r3
 8000d82:	d0b6      	beq.n	8000cf2 <_malloc_r+0x22>
 8000d84:	1b9b      	subs	r3, r3, r6
 8000d86:	50a3      	str	r3, [r4, r2]
 8000d88:	e7b3      	b.n	8000cf2 <_malloc_r+0x22>
 8000d8a:	6862      	ldr	r2, [r4, #4]
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	bf0c      	ite	eq
 8000d90:	6032      	streq	r2, [r6, #0]
 8000d92:	605a      	strne	r2, [r3, #4]
 8000d94:	e7ec      	b.n	8000d70 <_malloc_r+0xa0>
 8000d96:	4623      	mov	r3, r4
 8000d98:	6864      	ldr	r4, [r4, #4]
 8000d9a:	e7b2      	b.n	8000d02 <_malloc_r+0x32>
 8000d9c:	4634      	mov	r4, r6
 8000d9e:	6876      	ldr	r6, [r6, #4]
 8000da0:	e7b9      	b.n	8000d16 <_malloc_r+0x46>
 8000da2:	230c      	movs	r3, #12
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4638      	mov	r0, r7
 8000da8:	f000 f8b6 	bl	8000f18 <__malloc_unlock>
 8000dac:	e7a1      	b.n	8000cf2 <_malloc_r+0x22>
 8000dae:	6025      	str	r5, [r4, #0]
 8000db0:	e7de      	b.n	8000d70 <_malloc_r+0xa0>
 8000db2:	bf00      	nop
 8000db4:	20000088 	.word	0x20000088

08000db8 <_sbrk_r>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	4d06      	ldr	r5, [pc, #24]	; (8000dd4 <_sbrk_r+0x1c>)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	602b      	str	r3, [r5, #0]
 8000dc4:	f7ff fb36 	bl	8000434 <_sbrk>
 8000dc8:	1c43      	adds	r3, r0, #1
 8000dca:	d102      	bne.n	8000dd2 <_sbrk_r+0x1a>
 8000dcc:	682b      	ldr	r3, [r5, #0]
 8000dce:	b103      	cbz	r3, 8000dd2 <_sbrk_r+0x1a>
 8000dd0:	6023      	str	r3, [r4, #0]
 8000dd2:	bd38      	pop	{r3, r4, r5, pc}
 8000dd4:	20000090 	.word	0x20000090

08000dd8 <__sread>:
 8000dd8:	b510      	push	{r4, lr}
 8000dda:	460c      	mov	r4, r1
 8000ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000de0:	f000 f8a0 	bl	8000f24 <_read_r>
 8000de4:	2800      	cmp	r0, #0
 8000de6:	bfab      	itete	ge
 8000de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000dea:	89a3      	ldrhlt	r3, [r4, #12]
 8000dec:	181b      	addge	r3, r3, r0
 8000dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000df2:	bfac      	ite	ge
 8000df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000df6:	81a3      	strhlt	r3, [r4, #12]
 8000df8:	bd10      	pop	{r4, pc}

08000dfa <__swrite>:
 8000dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dfe:	461f      	mov	r7, r3
 8000e00:	898b      	ldrh	r3, [r1, #12]
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	4605      	mov	r5, r0
 8000e06:	460c      	mov	r4, r1
 8000e08:	4616      	mov	r6, r2
 8000e0a:	d505      	bpl.n	8000e18 <__swrite+0x1e>
 8000e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e10:	2302      	movs	r3, #2
 8000e12:	2200      	movs	r2, #0
 8000e14:	f000 f868 	bl	8000ee8 <_lseek_r>
 8000e18:	89a3      	ldrh	r3, [r4, #12]
 8000e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e22:	81a3      	strh	r3, [r4, #12]
 8000e24:	4632      	mov	r2, r6
 8000e26:	463b      	mov	r3, r7
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e2e:	f000 b817 	b.w	8000e60 <_write_r>

08000e32 <__sseek>:
 8000e32:	b510      	push	{r4, lr}
 8000e34:	460c      	mov	r4, r1
 8000e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e3a:	f000 f855 	bl	8000ee8 <_lseek_r>
 8000e3e:	1c43      	adds	r3, r0, #1
 8000e40:	89a3      	ldrh	r3, [r4, #12]
 8000e42:	bf15      	itete	ne
 8000e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e4e:	81a3      	strheq	r3, [r4, #12]
 8000e50:	bf18      	it	ne
 8000e52:	81a3      	strhne	r3, [r4, #12]
 8000e54:	bd10      	pop	{r4, pc}

08000e56 <__sclose>:
 8000e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e5a:	f000 b813 	b.w	8000e84 <_close_r>
	...

08000e60 <_write_r>:
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4d07      	ldr	r5, [pc, #28]	; (8000e80 <_write_r+0x20>)
 8000e64:	4604      	mov	r4, r0
 8000e66:	4608      	mov	r0, r1
 8000e68:	4611      	mov	r1, r2
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	602a      	str	r2, [r5, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f7ff fa93 	bl	800039a <_write>
 8000e74:	1c43      	adds	r3, r0, #1
 8000e76:	d102      	bne.n	8000e7e <_write_r+0x1e>
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	b103      	cbz	r3, 8000e7e <_write_r+0x1e>
 8000e7c:	6023      	str	r3, [r4, #0]
 8000e7e:	bd38      	pop	{r3, r4, r5, pc}
 8000e80:	20000090 	.word	0x20000090

08000e84 <_close_r>:
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	4d06      	ldr	r5, [pc, #24]	; (8000ea0 <_close_r+0x1c>)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	602b      	str	r3, [r5, #0]
 8000e90:	f7ff fa9f 	bl	80003d2 <_close>
 8000e94:	1c43      	adds	r3, r0, #1
 8000e96:	d102      	bne.n	8000e9e <_close_r+0x1a>
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	b103      	cbz	r3, 8000e9e <_close_r+0x1a>
 8000e9c:	6023      	str	r3, [r4, #0]
 8000e9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ea0:	20000090 	.word	0x20000090

08000ea4 <_fstat_r>:
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4d07      	ldr	r5, [pc, #28]	; (8000ec4 <_fstat_r+0x20>)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	4604      	mov	r4, r0
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	602b      	str	r3, [r5, #0]
 8000eb2:	f7ff fa99 	bl	80003e8 <_fstat>
 8000eb6:	1c43      	adds	r3, r0, #1
 8000eb8:	d102      	bne.n	8000ec0 <_fstat_r+0x1c>
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	b103      	cbz	r3, 8000ec0 <_fstat_r+0x1c>
 8000ebe:	6023      	str	r3, [r4, #0]
 8000ec0:	bd38      	pop	{r3, r4, r5, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000090 	.word	0x20000090

08000ec8 <_isatty_r>:
 8000ec8:	b538      	push	{r3, r4, r5, lr}
 8000eca:	4d06      	ldr	r5, [pc, #24]	; (8000ee4 <_isatty_r+0x1c>)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	4604      	mov	r4, r0
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	602b      	str	r3, [r5, #0]
 8000ed4:	f7ff fa97 	bl	8000406 <_isatty>
 8000ed8:	1c43      	adds	r3, r0, #1
 8000eda:	d102      	bne.n	8000ee2 <_isatty_r+0x1a>
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	b103      	cbz	r3, 8000ee2 <_isatty_r+0x1a>
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	bd38      	pop	{r3, r4, r5, pc}
 8000ee4:	20000090 	.word	0x20000090

08000ee8 <_lseek_r>:
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	4d07      	ldr	r5, [pc, #28]	; (8000f08 <_lseek_r+0x20>)
 8000eec:	4604      	mov	r4, r0
 8000eee:	4608      	mov	r0, r1
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	602a      	str	r2, [r5, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f7ff fa8f 	bl	800041a <_lseek>
 8000efc:	1c43      	adds	r3, r0, #1
 8000efe:	d102      	bne.n	8000f06 <_lseek_r+0x1e>
 8000f00:	682b      	ldr	r3, [r5, #0]
 8000f02:	b103      	cbz	r3, 8000f06 <_lseek_r+0x1e>
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	bd38      	pop	{r3, r4, r5, pc}
 8000f08:	20000090 	.word	0x20000090

08000f0c <__malloc_lock>:
 8000f0c:	4801      	ldr	r0, [pc, #4]	; (8000f14 <__malloc_lock+0x8>)
 8000f0e:	f7ff be0d 	b.w	8000b2c <__retarget_lock_acquire_recursive>
 8000f12:	bf00      	nop
 8000f14:	20000084 	.word	0x20000084

08000f18 <__malloc_unlock>:
 8000f18:	4801      	ldr	r0, [pc, #4]	; (8000f20 <__malloc_unlock+0x8>)
 8000f1a:	f7ff be08 	b.w	8000b2e <__retarget_lock_release_recursive>
 8000f1e:	bf00      	nop
 8000f20:	20000084 	.word	0x20000084

08000f24 <_read_r>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	4d07      	ldr	r5, [pc, #28]	; (8000f44 <_read_r+0x20>)
 8000f28:	4604      	mov	r4, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	602a      	str	r2, [r5, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	f7ff fa14 	bl	8000360 <_read>
 8000f38:	1c43      	adds	r3, r0, #1
 8000f3a:	d102      	bne.n	8000f42 <_read_r+0x1e>
 8000f3c:	682b      	ldr	r3, [r5, #0]
 8000f3e:	b103      	cbz	r3, 8000f42 <_read_r+0x1e>
 8000f40:	6023      	str	r3, [r4, #0]
 8000f42:	bd38      	pop	{r3, r4, r5, pc}
 8000f44:	20000090 	.word	0x20000090

08000f48 <_init>:
 8000f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4a:	bf00      	nop
 8000f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f4e:	bc08      	pop	{r3}
 8000f50:	469e      	mov	lr, r3
 8000f52:	4770      	bx	lr

08000f54 <_fini>:
 8000f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f56:	bf00      	nop
 8000f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5a:	bc08      	pop	{r3}
 8000f5c:	469e      	mov	lr, r3
 8000f5e:	4770      	bx	lr
